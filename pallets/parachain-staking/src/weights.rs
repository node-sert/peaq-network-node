//! Autogenerated weights for `parachain_staking`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-27, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//!  CPU: `AMD Ryzen 5 5600H with Radeon Graphics`
//! EXECUTION: Some(Native), WASM-EXECUTION: Compiled, CHAIN: Some("dev-local"), DB CACHE: 1024

// Executed Command:
// ./target/release/peaq-node
// benchmark
// pallet
// --chain=dev-local
// --execution=native
// --wasm-execution=compiled
// --pallet=parachain_staking
// --extrinsic=*
// --steps=50
// --repeat=20
// --output=weight.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;
use frame_support::weights::constants::RocksDbWeight;

/// Weight functions for `parachain_staking`.
pub struct WeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> crate::WeightInfo for WeightInfo<T> {
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	fn on_initialize_no_action() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `328`
		//  Estimated: `1497`
		// Minimum execution time: 7_344_000 picoseconds.
		Weight::from_parts(7_574_000, 0)
			.saturating_add(Weight::from_parts(0, 1497))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: ParachainStaking Round (r:1 w:1)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	fn on_initialize_round_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `328`
		//  Estimated: `1497`
		// Minimum execution time: 20_208_000 picoseconds.
		Weight::from_parts(20_449_000, 0)
			.saturating_add(Weight::from_parts(0, 1497))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking ForceNewRound (r:0 w:1)
	/// Proof: ParachainStaking ForceNewRound (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn force_new_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_927_000 picoseconds.
		Weight::from_parts(9_077_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:1)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:0)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:12 w:0)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[4, 16]`.
	/// The range of component `m` is `[0, 25]`.
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (576 ±0) + n * (1363 ±0)`
		//  Estimated: `4775 + n * (2876 ±11)`
		// Minimum execution time: 50_916_000 picoseconds.
		Weight::from_parts(51_568_000, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 497_905
			.saturating_add(Weight::from_parts(22_128_883, 0).saturating_mul(n.into()))
			// Standard Error: 329_289
			.saturating_add(Weight::from_parts(5_518_090, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 2876).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking Round (r:1 w:1)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	fn set_blocks_per_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `328`
		//  Estimated: `1497`
		// Minimum execution time: 28_003_000 picoseconds.
		Weight::from_parts(28_664_000, 0)
			.saturating_add(Weight::from_parts(0, 1497))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking CandidatePool (r:5 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:26 w:26)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:25 w:25)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Session Validators (r:1 w:0)
	/// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session DisabledValidators (r:1 w:1)
	/// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Digest (r:1 w:1)
	/// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[5, 16]`.
	/// The range of component `m` is `[0, 25]`.
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (955 ±0) + n * (787 ±0)`
		//  Estimated: `19915 + m * (2716 ±0) + n * (192 ±8)`
		// Minimum execution time: 221_469_000 picoseconds.
		Weight::from_parts(48_191_231, 0)
			.saturating_add(Weight::from_parts(0, 19915))
			// Standard Error: 127_941
			.saturating_add(Weight::from_parts(12_156_462, 0).saturating_mul(n.into()))
			// Standard Error: 58_204
			.saturating_add(Weight::from_parts(34_229_273, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2716).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 192).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:0)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 15]`.
	/// The range of component `m` is `[0, 25]`.
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `884 + m * (63 ±0) + n * (165 ±0)`
		//  Estimated: `4775 + m * (61 ±0)`
		// Minimum execution time: 205_339_000 picoseconds.
		Weight::from_parts(179_310_949, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 51_352
			.saturating_add(Weight::from_parts(5_332_455, 0).saturating_mul(n.into()))
			// Standard Error: 29_318
			.saturating_add(Weight::from_parts(961_938, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(11))
			.saturating_add(T::DbWeight::get().writes(7))
			.saturating_add(Weight::from_parts(0, 61).saturating_mul(m.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:5 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[5, 15]`.
	/// The range of component `m` is `[0, 25]`.
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `795 + m * (240 ±0) + n * (82 ±0)`
		//  Estimated: `19915`
		// Minimum execution time: 198_005_000 picoseconds.
		Weight::from_parts(78_767_210, 0)
			.saturating_add(Weight::from_parts(0, 19915))
			// Standard Error: 112_207
			.saturating_add(Weight::from_parts(9_365_453, 0).saturating_mul(n.into()))
			// Standard Error: 46_481
			.saturating_add(Weight::from_parts(11_581_803, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: ParachainStaking CandidatePool (r:2 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[5, 15]`.
	/// The range of component `m` is `[0, 25]`.
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `508 + m * (96 ±0) + n * (70 ±0)`
		//  Estimated: `8560`
		// Minimum execution time: 135_307_000 picoseconds.
		Weight::from_parts(68_108_575, 0)
			.saturating_add(Weight::from_parts(0, 8560))
			// Standard Error: 64_158
			.saturating_add(Weight::from_parts(5_681_415, 0).saturating_mul(n.into()))
			// Standard Error: 26_577
			.saturating_add(Weight::from_parts(5_731_226, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:26 w:26)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:25 w:25)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Session Validators (r:1 w:0)
	/// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session DisabledValidators (r:1 w:1)
	/// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Digest (r:1 w:1)
	/// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[5, 15]`.
	/// The range of component `m` is `[0, 25]`.
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (742 ±0) + n * (750 ±0)`
		//  Estimated: `4775 + m * (2716 ±0) + n * (176 ±7)`
		// Minimum execution time: 94_520_000 picoseconds.
		Weight::from_parts(20_459_468, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 79_274
			.saturating_add(Weight::from_parts(5_520_470, 0).saturating_mul(n.into()))
			// Standard Error: 32_839
			.saturating_add(Weight::from_parts(27_035_273, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(m.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((2_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2716).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 176).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 15]`.
	/// The range of component `m` is `[0, 25]`.
	/// The range of component `u` is `[0, 9]`.
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `371 + m * (106 ±0) + n * (161 ±0) + u * (20 ±0)`
		//  Estimated: `4775`
		// Minimum execution time: 221_801_000 picoseconds.
		Weight::from_parts(134_770_752, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 50_222
			.saturating_add(Weight::from_parts(6_113_695, 0).saturating_mul(n.into()))
			// Standard Error: 28_675
			.saturating_add(Weight::from_parts(4_579_584, 0).saturating_mul(m.into()))
			// Standard Error: 76_079
			.saturating_add(Weight::from_parts(753_154, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 15]`.
	/// The range of component `m` is `[0, 25]`.
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `621 + m * (63 ±0) + n * (107 ±0)`
		//  Estimated: `4775`
		// Minimum execution time: 131_970_000 picoseconds.
		Weight::from_parts(56_952_958, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 38_756
			.saturating_add(Weight::from_parts(5_821_110, 0).saturating_mul(n.into()))
			// Standard Error: 22_127
			.saturating_add(Weight::from_parts(4_666_971, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:2 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking LastDelegation (r:1 w:1)
	/// Proof: ParachainStaking LastDelegation (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	/// The range of component `m` is `[1, 24]`.
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1231 + m * (131 ±0) + n * (192 ±0)`
		//  Estimated: `8560`
		// Minimum execution time: 285_742_000 picoseconds.
		Weight::from_parts(185_424_691, 0)
			.saturating_add(Weight::from_parts(0, 8560))
			// Standard Error: 34_767
			.saturating_add(Weight::from_parts(6_381_766, 0).saturating_mul(n.into()))
			// Standard Error: 22_959
			.saturating_add(Weight::from_parts(4_944_298, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(12))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	/// The range of component `m` is `[1, 24]`.
	/// The range of component `u` is `[1, 9]`.
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `904 + m * (114 ±0) + n * (169 ±0) + u * (20 ±0)`
		//  Estimated: `4775`
		// Minimum execution time: 245_596_000 picoseconds.
		Weight::from_parts(145_931_933, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 40_000
			.saturating_add(Weight::from_parts(5_792_093, 0).saturating_mul(n.into()))
			// Standard Error: 26_428
			.saturating_add(Weight::from_parts(4_713_780, 0).saturating_mul(m.into()))
			// Standard Error: 72_341
			.saturating_add(Weight::from_parts(1_209_520, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	/// The range of component `m` is `[1, 24]`.
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `939 + m * (81 ±0) + n * (122 ±0)`
		//  Estimated: `4775`
		// Minimum execution time: 163_881_000 picoseconds.
		Weight::from_parts(75_682_205, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 33_428
			.saturating_add(Weight::from_parts(5_871_742, 0).saturating_mul(n.into()))
			// Standard Error: 22_075
			.saturating_add(Weight::from_parts(4_774_536, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	/// The range of component `m` is `[1, 24]`.
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `939 + m * (81 ±0) + n * (122 ±0)`
		//  Estimated: `4775`
		// Minimum execution time: 172_067_000 picoseconds.
		Weight::from_parts(87_823_260, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 31_077
			.saturating_add(Weight::from_parts(5_716_429, 0).saturating_mul(n.into()))
			// Standard Error: 20_523
			.saturating_add(Weight::from_parts(4_713_811, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	/// The range of component `m` is `[1, 24]`.
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `939 + m * (81 ±0) + n * (122 ±0)`
		//  Estimated: `4775`
		// Minimum execution time: 171_726_000 picoseconds.
		Weight::from_parts(87_018_126, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 32_722
			.saturating_add(Weight::from_parts(5_728_803, 0).saturating_mul(n.into()))
			// Standard Error: 21_609
			.saturating_add(Weight::from_parts(4_714_191, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `u` is `[1, 9]`.
	fn unlock_unstaked(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `634 + u * (20 ±0)`
		//  Estimated: `4764`
		// Minimum execution time: 94_269_000 picoseconds.
		Weight::from_parts(95_124_344, 0)
			.saturating_add(Weight::from_parts(0, 4764))
			// Standard Error: 56_980
			.saturating_add(Weight::from_parts(2_187_054, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:0 w:1)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_max_candidate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 20_509_000 picoseconds.
		Weight::from_parts(20_860_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl crate::WeightInfo for () {
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	fn on_initialize_no_action() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `328`
		//  Estimated: `1497`
		// Minimum execution time: 7_344_000 picoseconds.
		Weight::from_parts(7_574_000, 0)
			.saturating_add(Weight::from_parts(0, 1497))
			.saturating_add(RocksDbWeight::get().reads(1))
	}
	/// Storage: ParachainStaking Round (r:1 w:1)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	fn on_initialize_round_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `328`
		//  Estimated: `1497`
		// Minimum execution time: 20_208_000 picoseconds.
		Weight::from_parts(20_449_000, 0)
			.saturating_add(Weight::from_parts(0, 1497))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking ForceNewRound (r:0 w:1)
	/// Proof: ParachainStaking ForceNewRound (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	fn force_new_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_927_000 picoseconds.
		Weight::from_parts(9_077_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:1)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:0)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:12 w:0)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[4, 16]`.
	/// The range of component `m` is `[0, 25]`.
	fn set_max_selected_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (576 ±0) + n * (1363 ±0)`
		//  Estimated: `4775 + n * (2876 ±11)`
		// Minimum execution time: 50_916_000 picoseconds.
		Weight::from_parts(51_568_000, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 497_905
			.saturating_add(Weight::from_parts(22_128_883, 0).saturating_mul(n.into()))
			// Standard Error: 329_289
			.saturating_add(Weight::from_parts(5_518_090, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(RocksDbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 2876).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking Round (r:1 w:1)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	fn set_blocks_per_round() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `328`
		//  Estimated: `1497`
		// Minimum execution time: 28_003_000 picoseconds.
		Weight::from_parts(28_664_000, 0)
			.saturating_add(Weight::from_parts(0, 1497))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: ParachainStaking CandidatePool (r:5 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:26 w:26)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:25 w:25)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Session Validators (r:1 w:0)
	/// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session DisabledValidators (r:1 w:1)
	/// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Digest (r:1 w:1)
	/// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[5, 16]`.
	/// The range of component `m` is `[0, 25]`.
	fn force_remove_candidate(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (955 ±0) + n * (787 ±0)`
		//  Estimated: `19915 + m * (2716 ±0) + n * (192 ±8)`
		// Minimum execution time: 221_469_000 picoseconds.
		Weight::from_parts(48_191_231, 0)
			.saturating_add(Weight::from_parts(0, 19915))
			// Standard Error: 127_941
			.saturating_add(Weight::from_parts(12_156_462, 0).saturating_mul(n.into()))
			// Standard Error: 58_204
			.saturating_add(Weight::from_parts(34_229_273, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(13))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(m.into())))
			.saturating_add(RocksDbWeight::get().writes(7))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2716).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 192).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:0)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 15]`.
	/// The range of component `m` is `[0, 25]`.
	fn join_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `884 + m * (63 ±0) + n * (165 ±0)`
		//  Estimated: `4775 + m * (61 ±0)`
		// Minimum execution time: 205_339_000 picoseconds.
		Weight::from_parts(179_310_949, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 51_352
			.saturating_add(Weight::from_parts(5_332_455, 0).saturating_mul(n.into()))
			// Standard Error: 29_318
			.saturating_add(Weight::from_parts(961_938, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(11))
			.saturating_add(RocksDbWeight::get().writes(7))
			.saturating_add(Weight::from_parts(0, 61).saturating_mul(m.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:5 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[5, 15]`.
	/// The range of component `m` is `[0, 25]`.
	fn init_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `795 + m * (240 ±0) + n * (82 ±0)`
		//  Estimated: `19915`
		// Minimum execution time: 198_005_000 picoseconds.
		Weight::from_parts(78_767_210, 0)
			.saturating_add(Weight::from_parts(0, 19915))
			// Standard Error: 112_207
			.saturating_add(Weight::from_parts(9_365_453, 0).saturating_mul(n.into()))
			// Standard Error: 46_481
			.saturating_add(Weight::from_parts(11_581_803, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	/// Storage: ParachainStaking CandidatePool (r:2 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[5, 15]`.
	/// The range of component `m` is `[0, 25]`.
	fn cancel_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `508 + m * (96 ±0) + n * (70 ±0)`
		//  Estimated: `8560`
		// Minimum execution time: 135_307_000 picoseconds.
		Weight::from_parts(68_108_575, 0)
			.saturating_add(Weight::from_parts(0, 8560))
			// Standard Error: 64_158
			.saturating_add(Weight::from_parts(5_681_415, 0).saturating_mul(n.into()))
			// Standard Error: 26_577
			.saturating_add(Weight::from_parts(5_731_226, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:26 w:26)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:25 w:25)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: Session Validators (r:1 w:0)
	/// Proof Skipped: Session Validators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Session DisabledValidators (r:1 w:1)
	/// Proof Skipped: Session DisabledValidators (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System Digest (r:1 w:1)
	/// Proof Skipped: System Digest (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: ParachainStaking CounterForCandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CounterForCandidatePool (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// The range of component `n` is `[5, 15]`.
	/// The range of component `m` is `[0, 25]`.
	fn execute_leave_candidates(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + m * (742 ±0) + n * (750 ±0)`
		//  Estimated: `4775 + m * (2716 ±0) + n * (176 ±7)`
		// Minimum execution time: 94_520_000 picoseconds.
		Weight::from_parts(20_459_468, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 79_274
			.saturating_add(Weight::from_parts(5_520_470, 0).saturating_mul(n.into()))
			// Standard Error: 32_839
			.saturating_add(Weight::from_parts(27_035_273, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(m.into())))
			.saturating_add(RocksDbWeight::get().writes(5))
			.saturating_add(RocksDbWeight::get().writes((2_u64).saturating_mul(m.into())))
			.saturating_add(Weight::from_parts(0, 2716).saturating_mul(m.into()))
			.saturating_add(Weight::from_parts(0, 176).saturating_mul(n.into()))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:1 w:0)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 15]`.
	/// The range of component `m` is `[0, 25]`.
	/// The range of component `u` is `[0, 9]`.
	fn candidate_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `371 + m * (106 ±0) + n * (161 ±0) + u * (20 ±0)`
		//  Estimated: `4775`
		// Minimum execution time: 221_801_000 picoseconds.
		Weight::from_parts(134_770_752, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 50_222
			.saturating_add(Weight::from_parts(6_113_695, 0).saturating_mul(n.into()))
			// Standard Error: 28_675
			.saturating_add(Weight::from_parts(4_579_584, 0).saturating_mul(m.into()))
			// Standard Error: 76_079
			.saturating_add(Weight::from_parts(753_154, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 15]`.
	/// The range of component `m` is `[0, 25]`.
	fn candidate_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `621 + m * (63 ±0) + n * (107 ±0)`
		//  Estimated: `4775`
		// Minimum execution time: 131_970_000 picoseconds.
		Weight::from_parts(56_952_958, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 38_756
			.saturating_add(Weight::from_parts(5_821_110, 0).saturating_mul(n.into()))
			// Standard Error: 22_127
			.saturating_add(Weight::from_parts(4_666_971, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:2 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking LastDelegation (r:1 w:1)
	/// Proof: ParachainStaking LastDelegation (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Round (r:1 w:0)
	/// Proof: ParachainStaking Round (max_values: Some(1), max_size: Some(12), added: 507, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	/// The range of component `m` is `[1, 24]`.
	fn join_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1231 + m * (131 ±0) + n * (192 ±0)`
		//  Estimated: `8560`
		// Minimum execution time: 285_742_000 picoseconds.
		Weight::from_parts(185_424_691, 0)
			.saturating_add(Weight::from_parts(0, 8560))
			// Standard Error: 34_767
			.saturating_add(Weight::from_parts(6_381_766, 0).saturating_mul(n.into()))
			// Standard Error: 22_959
			.saturating_add(Weight::from_parts(4_944_298, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(12))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	/// The range of component `m` is `[1, 24]`.
	/// The range of component `u` is `[1, 9]`.
	fn delegator_stake_more(n: u32, m: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `904 + m * (114 ±0) + n * (169 ±0) + u * (20 ±0)`
		//  Estimated: `4775`
		// Minimum execution time: 245_596_000 picoseconds.
		Weight::from_parts(145_931_933, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 40_000
			.saturating_add(Weight::from_parts(5_792_093, 0).saturating_mul(n.into()))
			// Standard Error: 26_428
			.saturating_add(Weight::from_parts(4_713_780, 0).saturating_mul(m.into()))
			// Standard Error: 72_341
			.saturating_add(Weight::from_parts(1_209_520, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	/// The range of component `m` is `[1, 24]`.
	fn delegator_stake_less(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `939 + m * (81 ±0) + n * (122 ±0)`
		//  Estimated: `4775`
		// Minimum execution time: 163_881_000 picoseconds.
		Weight::from_parts(75_682_205, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 33_428
			.saturating_add(Weight::from_parts(5_871_742, 0).saturating_mul(n.into()))
			// Standard Error: 22_075
			.saturating_add(Weight::from_parts(4_774_536, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	/// The range of component `m` is `[1, 24]`.
	fn revoke_delegation(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `939 + m * (81 ±0) + n * (122 ±0)`
		//  Estimated: `4775`
		// Minimum execution time: 172_067_000 picoseconds.
		Weight::from_parts(87_823_260, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 31_077
			.saturating_add(Weight::from_parts(5_716_429, 0).saturating_mul(n.into()))
			// Standard Error: 20_523
			.saturating_add(Weight::from_parts(4_713_811, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	/// Storage: ParachainStaking DelegatorState (r:1 w:1)
	/// Proof: ParachainStaking DelegatorState (max_values: None, max_size: Some(105), added: 2580, mode: MaxEncodedLen)
	/// Storage: ParachainStaking CandidatePool (r:1 w:1)
	/// Proof: ParachainStaking CandidatePool (max_values: None, max_size: Some(1310), added: 3785, mode: MaxEncodedLen)
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TopCandidates (r:1 w:1)
	/// Proof: ParachainStaking TopCandidates (max_values: Some(1), max_size: Some(769), added: 1264, mode: MaxEncodedLen)
	/// Storage: ParachainStaking MaxSelectedCandidates (r:1 w:0)
	/// Proof: ParachainStaking MaxSelectedCandidates (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: ParachainStaking TotalCollatorStake (r:1 w:1)
	/// Proof: ParachainStaking TotalCollatorStake (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// The range of component `n` is `[1, 16]`.
	/// The range of component `m` is `[1, 24]`.
	fn leave_delegators(n: u32, m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `939 + m * (81 ±0) + n * (122 ±0)`
		//  Estimated: `4775`
		// Minimum execution time: 171_726_000 picoseconds.
		Weight::from_parts(87_018_126, 0)
			.saturating_add(Weight::from_parts(0, 4775))
			// Standard Error: 32_722
			.saturating_add(Weight::from_parts(5_728_803, 0).saturating_mul(n.into()))
			// Standard Error: 21_609
			.saturating_add(Weight::from_parts(4_714_191, 0).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	/// Storage: ParachainStaking Unstaking (r:1 w:1)
	/// Proof: ParachainStaking Unstaking (max_values: None, max_size: Some(241), added: 2716, mode: MaxEncodedLen)
	/// Storage: Balances Locks (r:1 w:1)
	/// Proof: Balances Locks (max_values: None, max_size: Some(1299), added: 3774, mode: MaxEncodedLen)
	/// Storage: Balances Freezes (r:1 w:0)
	/// Proof: Balances Freezes (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `u` is `[1, 9]`.
	fn unlock_unstaked(u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `634 + u * (20 ±0)`
		//  Estimated: `4764`
		// Minimum execution time: 94_269_000 picoseconds.
		Weight::from_parts(95_124_344, 0)
			.saturating_add(Weight::from_parts(0, 4764))
			// Standard Error: 56_980
			.saturating_add(Weight::from_parts(2_187_054, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	/// Storage: ParachainStaking MaxCollatorCandidateStake (r:0 w:1)
	/// Proof: ParachainStaking MaxCollatorCandidateStake (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn set_max_candidate_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 20_509_000 picoseconds.
		Weight::from_parts(20_860_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}
